// Copyright 2017 Vladimir Pryahin

/*
 В город N приехал цирк с командой атлетов. Они хотят удивить горожан города N —
 выстроить из своих тел
 башню максимальной высоты. Башня — это цепочка атлетов, первый стоит на земле,
 второй стоит у него на
 плечах, третий стоит на плечах у второго и т.д. Каждый атлет характеризуется
 силой si(kg) и массой mi(kg).
 Сила — это максимальная масса, которую атлет способен держать у себя на плечах.
 К сожалению ни один из атлетов не умеет программировать, так как всю жизнь они
 занимались физической
 подготовкой, и у них не было времени на изучение языков программирования.
 Помогите им, напишите
 программу, которая определит максимальную высоту башни, которую они могут
 составить.
 Известно, что если атлет тяжелее, то он и сильнее:
 если mi>mj, то si> sj.
 Атлеты равной массы могут иметь различную силу.
 */


/*==============================================
 Комментарий для преподавателя:
 ===============================================
 Для решения этой задачи я создал 2 массива, weight и power, в которых были веса и сила соответствеенно.
 Из условиия, что если атлет тяжелее, то он и сильнее, можно сделать вывод:
 если мы отстортируем оба массива, то элементы пары [вес-сила] сдвинутся на одинаковое кол-во позиций.
 
 Для сортировки используется std::sort.
 
 Далее мы берем самого легкого - это будет наша начальная башня.
 Далее запускаем цикл, который находит перворго, кто сможет выдержать эту башню.
 После "сажаем" текущую башню к нему на плечи. И так пока не пройдем весь массив.
 
 В итоге мы получим максимально возможную по высоте башню.
 Высота хранится в переменной height
 */

#include <stdlib.h>
#include <stdio.h>
#include <algorithm>

uint32_t get_max(int32_t* power, int32_t* weight, uint32_t size){
    uint32_t height = 1;
    std::sort(weight, weight + size);
    std::sort(power, power + size);
    uint32_t current_weight = weight[0];
    for (uint32_t i = 1; i < size; i++) {
        if (power[i] >= current_weight) {
            current_weight += weight[i];
            height++;
        }
    }
    
    return height;
}

int main() {
    int32_t* power = (int32_t*)malloc(0);
    int32_t* weight = (int32_t*)malloc(0);
    uint32_t power_in = 0, weight_in = 0, size = 0;
    while (scanf("%u %u", &weight_in, &power_in) == 2) {
        weight = (int32_t*)realloc(weight, (++size) * sizeof(int32_t));
        power = (int32_t*)realloc(power, (size) * sizeof(int32_t));
        weight[size - 1] = weight_in;
        power[size - 1] = power_in;
    }
    
    printf("%u", get_max(power, weight, size));
    
    free(weight);
    free(power);
    return 0;
}
